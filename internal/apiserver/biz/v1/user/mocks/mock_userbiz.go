// Code generated by MockGen. DO NOT EDIT.
// Source: D:/workspace/GoWorks/github.com/lichenglife/easyblog/internal/apiserver/biz/v1/user/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/lichenglife/easyblog/internal/apiserver/model"
)

// MockUserBiz is a mock of UserBiz interface.
type MockUserBiz struct {
	ctrl     *gomock.Controller
	recorder *MockUserBizMockRecorder
}

// MockUserBizMockRecorder is the mock recorder for MockUserBiz.
type MockUserBizMockRecorder struct {
	mock *MockUserBiz
}

// NewMockUserBiz creates a new mock instance.
func NewMockUserBiz(ctrl *gomock.Controller) *MockUserBiz {
	mock := &MockUserBiz{ctrl: ctrl}
	mock.recorder = &MockUserBizMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserBiz) EXPECT() *MockUserBizMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockUserBiz) ChangePassword(ctx context.Context, userID string, user model.ChangePasswordRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ctx, userID, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserBizMockRecorder) ChangePassword(ctx, userID, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserBiz)(nil).ChangePassword), ctx, userID, user)
}

// CreateUser mocks base method.
func (m *MockUserBiz) CreateUser(ctx context.Context, req *model.CreateUserRequest) (*model.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, req)
	ret0, _ := ret[0].(*model.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserBizMockRecorder) CreateUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserBiz)(nil).CreateUser), ctx, req)
}

// DeleteUser mocks base method.
func (m *MockUserBiz) DeleteUser(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserBizMockRecorder) DeleteUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserBiz)(nil).DeleteUser), ctx, userID)
}

// GetUserByID mocks base method.
func (m *MockUserBiz) GetUserByID(ctx context.Context, userID string) (*model.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*model.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserBizMockRecorder) GetUserByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserBiz)(nil).GetUserByID), ctx, userID)
}

// GetUserByUsername mocks base method.
func (m *MockUserBiz) GetUserByUsername(ctx context.Context, username string) (*model.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(*model.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserBizMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserBiz)(nil).GetUserByUsername), ctx, username)
}

// ListUsers mocks base method.
func (m *MockUserBiz) ListUsers(ctx context.Context, page, pageSize int) (*model.ListUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, page, pageSize)
	ret0, _ := ret[0].(*model.ListUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockUserBizMockRecorder) ListUsers(ctx, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockUserBiz)(nil).ListUsers), ctx, page, pageSize)
}

// UpdateUser mocks base method.
func (m *MockUserBiz) UpdateUser(ctx context.Context, user *model.UpdateUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserBizMockRecorder) UpdateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserBiz)(nil).UpdateUser), ctx, user)
}

// UserLogin mocks base method.
func (m *MockUserBiz) UserLogin(ctx context.Context, user model.UserLoginRequest) (*model.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", ctx, user)
	ret0, _ := ret[0].(*model.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockUserBizMockRecorder) UserLogin(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockUserBiz)(nil).UserLogin), ctx, user)
}
